window-open {
    duration-ms 300
    curve "ease-out-cubic"
    custom-shader r"
        vec4 open_color(vec3 coords_geo, vec3 size_geo) {
            vec4 color = vec4(0.0);
            if (0.0 <= coords_geo.x && coords_geo.x <= 1.0 && 0.0 <= coords_geo.y && coords_geo.y <= 1.0) {
                vec2 centered = coords_geo.xy - vec2(0.5);
                float dist = length(centered);
                float angle = niri_clamped_progress * 6.28; // 2pi rotation
                mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
                vec2 rotated = rotation * centered * (1.0 / (0.2 + 0.8 * niri_clamped_progress)) + vec2(0.5);
                if (0.0 <= rotated.x && rotated.x <= 1.0 && 0.0 <= rotated.y && rotated.y <= 1.0) {
                    vec4 tex_color = texture2D(niri_tex, rotated);
                    // Add rainbow pulse
                    vec3 pulse = 0.5 + 0.5 * sin(vec3(0.0, 2.0, 4.0) + niri_clamped_progress * 6.28);
                    color = tex_color * (0.5 + 0.5 * niri_clamped_progress) + vec4(pulse * 0.3, 0.0) * (1.0 - niri_clamped_progress);
                }
            }
            return color;
        }
    "
}

window-close {
    duration-ms 300
    curve "ease-out-cubic"
    custom-shader r"
        vec4 close_color(vec3 coords_geo, vec3 size_geo) {
            vec4 color = vec4(0.0);
            if (0.0 <= coords_geo.x && coords_geo.x <= 1.0 && 0.0 <= coords_geo.y && coords_geo.y <= 1.0) {
                vec2 centered = coords_geo.xy - vec2(0.5);
                float dist = length(centered);
                float angle = (1.0 - niri_clamped_progress) * 6.28;
                mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
                vec2 rotated = rotation * centered * (1.0 / (0.2 + 0.8 * (1.0 - niri_clamped_progress))) + vec2(0.5);
                if (0.0 <= rotated.x && rotated.x <= 1.0 && 0.0 <= rotated.y && rotated.y <= 1.0) {
                    vec4 tex_color = texture2D(niri_tex, rotated);
                    vec3 pulse = 0.5 + 0.5 * sin(vec3(0.0, 2.0, 4.0) + (1.0 - niri_clamped_progress) * 6.28);
                    color = tex_color * (0.5 + 0.5 * (1.0 - niri_clamped_progress)) + vec4(pulse * 0.3, 0.0) * niri_clamped_progress;
                }
            }
            return color;
        }
    "
}
